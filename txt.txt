A Raspberry Pi Zero 2 W já vem com o Bluetooth integrado, mas o serviço hciuart não é necessário nas versões mais recentes do Raspberry Pi OS, especialmente se você estiver usando o Bluetooth interno. Vamos reconfigurar e conectar o Bluetooth corretamente:


---

1️⃣ Preparar a Raspberry Pi para o Bluetooth

Atualizar o Sistema

sudo apt update
sudo apt upgrade -y

Instalar Dependências do Bluetooth

sudo apt install bluetooth bluez bluez-tools rfcomm python3-bluez -y

Ativar e Iniciar o Bluetooth

sudo systemctl enable bluetooth
sudo systemctl start bluetooth

Verificar o Status do Bluetooth

sudo systemctl status bluetooth

Deve mostrar algo como active (running).


---

2️⃣ Parear a Raspberry Pi com o Celular via Bluetooth

Entrar no Modo de Controle Bluetooth

sudo bluetoothctl

Comandos no bluetoothctl

power on
agent on
default-agent
scan on

Espere o dispositivo aparecer e copie o endereço MAC (formato XX:XX:XX:XX:XX:XX).

pair XX:XX:XX:XX:XX:XX
trust XX:XX:XX:XX:XX:XX
connect XX:XX:XX:XX:XX:XX

Criar uma Porta Serial Bluetooth

sudo rfcomm bind /dev/rfcomm0 XX:XX:XX:XX:XX:XX


---

3️⃣ Configurar o Bluetooth Serial para Comunicação com o WellWatch

Conectar a Porta Serial (RS-232) do WellWatch

Verifique qual porta a Raspberry usa para o WellWatch:

ls /dev/serial*

Supondo que a porta seja /dev/ttyS0.


---

4️⃣ Script Python para Comunicação Serial com o WellWatch

Crie um script Python na Raspberry Pi chamado wellwatch_receiver.py:

import serial

# Configuração das portas seriais
bluetooth = serial.Serial('/dev/rfcomm0', 9600, timeout=1)  # Comunicação com o Android
wellwatch = serial.Serial('/dev/ttyS0', 9600, timeout=1)    # Comunicação com o WellWatch

print("Aguardando comandos via Bluetooth...")

while True:
    try:
        # Lê o comando enviado pelo app Android
        if bluetooth.in_waiting > 0:
            comando = bluetooth.readline().decode('utf-8').strip()
            print(f"Comando recebido: {comando}")

            # Envia o comando para o WellWatch
            wellwatch.write((comando + "\n").encode('utf-8'))

            # Lê a resposta do WellWatch e envia de volta via Bluetooth
            if wellwatch.in_waiting > 0:
                resposta = wellwatch.readline().decode('utf-8').strip()
                bluetooth.write((resposta + "\n").encode('utf-8'))
                print(f"Resposta enviada: {resposta}")

    except Exception as e:
        print(f"Erro: {e}")

Executar o Script

python3 wellwatch_receiver.py


---

5️⃣ No Aplicativo Android: Comunicação Bluetooth

Adicionar Permissões no Manifest

<uses-permission android:name="android.permission.BLUETOOTH" />
<uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
<uses-permission android:name="android.permission.BLUETOOTH_CONNECT" />
<uses-permission android:name="android.permission.BLUETOOTH_SCAN" />
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />

Interface da Tela de Comunicação (activity_medicao.xml)

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/editCommand"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Digite o comando" />

    <Button
        android:id="@+id/btnEnviar"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Enviar Comando" />

    <TextView
        android:id="@+id/textResposta"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Resposta do WellWatch"
        android:textSize="18sp" />
</LinearLayout>


---

Activity Kotlin para Envio de Comandos Bluetooth

package com.example.app

import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothSocket
import android.os.Bundle
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import java.io.IOException
import java.io.InputStream
import java.io.OutputStream
import java.util.UUID

class MedicaoActivity : AppCompatActivity() {

    private val DEVICE_ADDRESS = "XX:XX:XX:XX:XX:XX" // MAC da Raspberry Pi
    private val UUID_SERIAL = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB")

    private var bluetoothSocket: BluetoothSocket? = null
    private var outputStream: OutputStream? = null
    private var inputStream: InputStream? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_medicao)

        val editCommand = findViewById<EditText>(R.id.editCommand)
        val btnEnviar = findViewById<Button>(R.id.btnEnviar)
        val textResposta = findViewById<TextView>(R.id.textResposta)

        btnEnviar.setOnClickListener {
            val command = editCommand.text.toString().trim()
            if (command.isNotEmpty()) {
                enviarComando(command, textResposta)
            } else {
                Toast.makeText(this, "Digite um comando!", Toast.LENGTH_SHORT).show()
            }
        }

        conectarDispositivoBluetooth()
    }

    private fun conectarDispositivoBluetooth() {
        val bluetoothAdapter = BluetoothAdapter.getDefaultAdapter()
        val device: BluetoothDevice? = bluetoothAdapter.getRemoteDevice(DEVICE_ADDRESS)

        try {
            bluetoothSocket = device?.createRfcommSocketToServiceRecord(UUID_SERIAL)
            bluetoothSocket?.connect()
            outputStream = bluetoothSocket?.outputStream
            inputStream = bluetoothSocket?.inputStream
            Toast.makeText(this, "Conectado ao dispositivo!", Toast.LENGTH_SHORT).show()
        } catch (e: IOException) {
            e.printStackTrace()
            Toast.makeText(this, "Falha na conexão Bluetooth", Toast.LENGTH_SHORT).show()
        }
    }

    private fun enviarComando(comando: String, textResposta: TextView) {
        try {
            outputStream?.write((comando + "\n").toByteArray())

            val buffer = ByteArray(1024)
            val bytesLidos = inputStream?.read(buffer) ?: 0
            val resposta = String(buffer, 0, bytesLidos)
            textResposta.text = "Resposta: $resposta"

        } catch (e: IOException) {
            e.printStackTrace()
            textResposta.text = "Erro ao enviar comando!"
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        try {
            bluetoothSocket?.close()
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }
}


---

Testando a Comunicação

1. Na Raspberry Pi, inicie o script wellwatch_receiver.py.


2. No app Android, envie um comando e veja se a resposta aparece na tela.


3. Monitore o terminal da Raspberry Pi para verificar se o comando foi recebido.




---

Se precisar de mais detalhes ou ajuda para ajustar o fluxo, me avise!

